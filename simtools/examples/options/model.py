"""Damped spring-mass system.

This script implements a model of a vertical spring-mass system in a
gravitational field, which is subject to damping.

The system is described by means of a second-order ordinary differential
equation based on Newton's second law of motion, where the restoring force of
the spring is determined according to Hooke's law and damping is proportional
to the velocity. The equation is numerically integrated using forward Euler
method.

The model demonstrates the following features supported by SimTools:

- separation of the actual model (implemented as a model script) from its
  parameters (stored in a parameter file);
- use of various options (namely 'data_dirname', 'params_filename',
  'save_data', 'sim_id' as well as a custom option 'verbose');
- loading parameters from the parameter file;
- employment of a simulation id;
- saving data generated by the model during a simulation;
- saving parameters;
- saving metadata (namely platform information and software versions).

A model simulation can be launched directly as follows:

    $ python model.py -p params.py -i 12345 -s -d data -v

where '12345' is a manually specified simulation id and 'data' is the name of a
subdirectory in the current directory, in which data generated by the model
during the simulation will be saved and which must already be created. As a
result, information on performed operations during the simulation will be
displayed on the screen, parameters and metadata will be saved in the current
directory, and data generated by the model will be saved in its subdirectory
'data'.

Alternatively, a model simulation can be launched by invoking the simulation
launcher provided by SimTools as follows:

    $ runsim -p params.py -d data -e python model.py -v

In this case, as before, information on performed operations during the
simulation will be displayed on the screen, but the simulation id will be
generated automatically, parameters and metadata will be saved in an
automatically created simulation directory, and data generated by the model
will be saved in its subdirectory 'data', which will also be created
automatically.
"""

from __future__ import print_function

import argparse
import datetime
import os
import platform

import simtools

# Filenames
params_filename = "param.json"
platform_filename = "platform.json"
pos_filename = "pos.txt"
versions_filename = "version.json"

# Parameters to be saved
saved_params = ['anchor_pos', 'damping_coef', 'displacement', 'gravity',
                'mass', 'sim_dt', 'sim_duration', 'sim_id', 'spring_const']

# Process command line arguments
parser = argparse.ArgumentParser()
parser.add_argument(
    "-v", "--verbose",
    dest='verbose', action='store_true',
    help="display information on performed operations")
options = simtools.parse_args(
    ['data_dirname', 'params_filename', 'save_data', 'sim_id'], parser=parser)

# Load parameters
assert options.params_filename is not None, "Parameter file is not specified."
params = simtools.load_params(options.params_filename)

# Add simulation id to parameters
params.sim_id = options.sim_id

# Validate displacement
assert params.displacement <= params.anchor_pos, \
    "Mass initial displacement must not be greater than the anchor position."

# Determine invariant quantities
gravity_force = params.mass * params.gravity

# Determine initial quantities
pos = params.anchor_pos - params.displacement
vel = 0.0

# If necessary, create a store for recording data
if options.save_data:
    pos_data = [pos]

# Run a simulation for the specified time
n_sim_steps = int(round(params.sim_duration / params.sim_dt))
if options.verbose:
    start_time = datetime.datetime.now()
    print("Simulation started at "
          "{}.".format(start_time.strftime("%H:%M:%S.%f")))
for _ in range(n_sim_steps):
    # Update system state
    spring_force = -params.spring_const * (pos - params.anchor_pos)
    damping_force = params.damping_coef * vel
    net_force = spring_force - damping_force - gravity_force
    accel = net_force / params.mass
    vel += accel * params.sim_dt
    pos += vel * params.sim_dt

    # If necessary, record data
    if options.save_data:
        pos_data.append(pos)
if options.verbose:
    end_time = datetime.datetime.now()
    print("Simulation stopped at {}.".format(end_time.strftime("%H:%M:%S.%f")))
    print("Simulation run time: {}.".format(end_time - start_time))

# If necessary, save data
if options.save_data:
    if options.verbose:
        print("Saving data...")

    # Adjust directory name
    dirname = options.data_dirname if options.data_dirname is not None else ""

    # Save generated data
    with open(os.path.join(dirname, pos_filename), 'w') as pos_file:
        pos_file.write("\n".join("{:.6f}".format(pos) for pos in pos_data))

    # Save parameters
    params.save(params_filename, saved_params, sort_keys=True)

    # Save platform information
    simtools.save_platform(platform_filename)

    # Save software versions
    versions_info = [('python', platform.python_version()),
                     ('simtools', simtools.__version__)]
    simtools.save_versions(versions_filename, versions_info)

    if options.verbose:
        print("Data saved.")
